# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FsfPoyktC2g1MvE1HKVi2KkVliokCq46
"""

# ----------------------------
# 1. استيراد المكتبات
# ----------------------------
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error
import joblib

# ----------------------------
# 2. تحميل البيانات المعدّلة
# ----------------------------
df = pd.read_csv("/content/Modified_Ticket_Pricing.csv")
df.columns = df.columns.str.strip()

# ----------------------------
# 3. معالجة القيم الناقصة بسبب المقاعد غير المعرفة
# ----------------------------
df['Seat_Multiplier'] = df['Seat_Multiplier'].fillna(3.0)  # نضيف مضاعف للمقعد Diamond
mask = df['Base_Price_Base'].isna()
df.loc[mask, 'Base_Price_Base'] = df.loc[mask, 'Base_Price'] / df.loc[mask, 'Seat_Multiplier']

# ----------------------------
# 4. ترميز أهمية المباراة
# ----------------------------
df['Importance_Num'] = LabelEncoder().fit_transform(df['Importance'])

# ----------------------------
# 5. تجهيز المدخلات والمخرجات
# ----------------------------
X = df[['Importance_Num', 'Days_until_match', 'Tickets_Sold']]
y = df['Base_Price_Base']

# ----------------------------
# 6. تقسيم البيانات
# ----------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ----------------------------
# 7. تدريب المودل
# ----------------------------
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# ----------------------------
# 8. حفظ المودل
# ----------------------------
joblib.dump(model, "ticket_price_predictor.pkl")

# ----------------------------
# 9. تقييم الأداء
# ----------------------------
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

train_r2 = r2_score(y_train, y_train_pred)
test_r2 = r2_score(y_test, y_test_pred)
train_rmse = np.sqrt(mean_squared_error(y_train, y_train_pred))
test_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))

print(f"🎯 R² على بيانات التدريب: {train_r2:.2f}")
print(f"🎯 R² على بيانات الاختبار: {test_r2:.2f}")
print(f"📉 RMSE على التدريب: {train_rmse:.2f}")
print(f"📉 RMSE على الاختبار: {test_rmse:.2f}")

# ----------------------------
# 10. تجربة المودل على بيانات جديدة
# ----------------------------
new_data = pd.DataFrame([
    [2, 3, 0.95],  # high importance, 3 days left, 95% sold
    [0, 10, 0.1]   # low importance, 10 days left, 10% sold
], columns=['Importance_Num', 'Days_until_match', 'Tickets_Sold'])

predictions = model.predict(new_data)
print("\n📌 التوقعات للبيانات الجديدة:")
for i, pred in enumerate(predictions):
    print(f"عينة {i+1}: السعر الأساسي المتوقع = {pred:.2f}")

